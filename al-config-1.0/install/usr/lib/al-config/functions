#!/bin/bash
#
# Copyright Â© 2019 Oracle Corp., Inc.  All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl
#

export PATH=/usr/sbin:/usr/bin:/sbin:/bin

config_dir=/etc/al-config
# AL config
config_file=$config_dir/al.conf
# OCI config: topic OCID etc.
oci_config_file=$config_dir/oci.conf
# OCI SDK/CLI config
oci_cli_config_file=$config_dir/oci_cli.conf
# OCI API private key
oci_api_key_file=$config_dir/oci_api_key.pem
# Yum-cron config
yum_cron_config_file=$config_dir/yum-cron.conf
# cron job
al_cron_job_file=/etc/cron.d/al-update
# log
log_file=/var/log/al.log
# state
al_state_file=/var/lib/al-config/state
al_update_file=/var/lib/al-config/update
system_uuid_file=/var/lib/al-config/system-uuid

# runtime work dir
work_dir=/var/run/al-config

# set default umask
umask 0026

# make sure runtime work dir is created
mkdir -p "$work_dir"

get_time() {
    date "+%F %T,%3N"
}

log() {
    log_info "$*"
}

log_info() {
    echo "$*"
    echo "$(get_time) - ${0##*/}[INFO]: $*" >> "$log_file"
}

log_debug() {
    echo "$(get_time) - ${0##*/}[DEBUG]: $*" >> "$log_file"
}

log_error() {
    echo "$*" >&2
    echo "$(get_time) - ${0##*/}[ERROR]: $*" >> "$log_file"
}

source_config_file() {
    if [ ! -f "$config_file" ]; then
        echo "$config_file doesn't exist." >&2
        exit 1
    fi
    . "$config_file"
}

run_as_root_check() {
    if [ "$(id -u)" != 0 ]; then
        echo "Please run as root." >&2
        exit 1
    fi
}

acquire_lock() {
    local lock_file=/var/run/${0##*/}.lock
    if ! exec 8>"$lock_file"; then
        log_error "Could not create lock file $lock_file."
        exit 1
    fi
    if ! flock -n 8; then
        log_info "Another $0 instance is holding $lock_file, existing"
        exit 1
    fi
}

release_lock() {
    flock -u 8
}

read_file() {
    local f="$1"
    if [[ $f =~ ^(https?|ftp|file):// ]]; then
        curl -sfm 25 "$f" 2>/dev/null
    else
        if [ -r "$f" ]; then
            cat "$f"
        fi
    fi
}

get_instance_name() {
    curl -sfm 25 -H "Authorization: Bearer Oracle" \
        http://169.254.169.254/opc/v2/instance/displayName \
        2>/dev/null || curl -sfm 25 \
        http://169.254.169.254/opc/v1/instance/displayName 2>/dev/null
}

is_known_exploit_detection_activated() {
    local activated
    if [ -e /proc/sys/kernel/known_exploit_detection ]; then
        activated=$(cat /proc/sys/kernel/known_exploit_detection)
        [ "$activated" = 1 ] && return 0
    fi
    return 1
}

enable_known_exploit_detection() {
    if [ -f /etc/uptrack/uptrack.conf ]; then
        if ! grep -q 'Known-Exploit-Detection' /etc/uptrack/uptrack.conf; then
            cat >> /etc/uptrack/uptrack.conf <<EOF

[Known-Exploit-Detection]
# Known Exploit Detection is another way Ksplice secures your system.
# Ksplice continues to close down vulnerabilities with zero downtime.
# And now you have the added security of being notified when attempted
# privilege escalation attacks are taken on your system.
enabled = yes
EOF
        fi
    fi
}

activate_known_exploit_detection() {
    enable_known_exploit_detection
    command -v ksplice &>/dev/null && ksplice -y kernel upgrade &>/dev/null
}

update_ksplice_access_key() {
    if [ -r /usr/lib/al-config/ksplice_access_key ] && \
        [ -f /etc/uptrack/uptrack.conf ]; then
        local key
        key=$(< /usr/lib/al-config/ksplice_access_key)
        if [ -n "$key" ]; then
            if ! grep -q "^accesskey[[:space:]]*=[[:space:]]*$key$" \
                /etc/uptrack/uptrack.conf; then
                sed -i "s/^accesskey[[:space:]]*=.*/accesskey = $key/g" \
                    /etc/uptrack/uptrack.conf
            fi
        fi
    fi
}

update_system_uuid() {
    local uuid
    uuid=$(dmidecode -s system-uuid 2>/dev/null)
    echo "$uuid" > "$system_uuid_file"
    log_debug "Updated system uuid $uuid"
}

system_uuid_changed() {
    [ -f "$system_uuid_file" ] || update_system_uuid
    local uuid new_uuid
    uuid=$(< "$system_uuid_file")
    new_uuid=$(dmidecode -s system-uuid 2>/dev/null)
    [ "$uuid" != "$new_uuid" ]
}

# validate time window string
# minimum: 2 hours
# maximum: 6 hours
# examples:
#   valid: <1-3>, <23-01>, <2-8>
#   invalid: <1-2>, <23-0>, <22-8>, <6-13>
validate_auto_update_time_window () {
    local time_window="$1"
    [[ "$time_window" =~ ^[0-9]{1,2}-[0-9]{1,2}$ ]] || return 1

    local start end window
    start=${time_window%-*}
    end=${time_window#*-}

    [ "${start::1}" = 0 ] && [ "${#start}" -eq 2 ] && start=${start:1:1}
    [ "${end::1}" = 0 ] && [ "${#end}" -eq 2 ] && end=${end:1:1}

    if [ "$start" -ge 24 ] || [ "$end" -ge 24 ]; then
        return 2
    fi
    [ "$end" -lt "$start" ] && end=$((end + 24))
    window=$((end - start))
    # minimum window: 2 hours
    [ "$window" -lt 2 ] && return 3
    # maximum window: 6 hours
    [ "$window" -gt 6 ] && return 4

    return 0
}

# param:
# $1 - time window
# $2 - update time
validate_auto_update_time () {
    local time_window update_time start end h m
    time_window="$1"
    update_time="$2"
    [ -z "$time_window" ] && return 1
    [ -z "$update_time" ] && return 1
    start=${time_window%-*}
    end=${time_window#*-}
    h=${update_time#* }
    ([ -z "$start" ] || [ -z "$end" ] || [ -z "$h" ]) && return 1

    # when start < end e.g. 1-5
    if [ "$start" -lt "$end" ]; then
        [ "$h" -ge "$start" ] && [ "$h" -lt "$end" ] || return 1
    # when start > end e.g 22-4
    elif [ "$start" -gt "$end" ]; then
        ([ "$h" -ge "$start" ] && [ "$h" -lt 24 ]) || ([ "$h" -ge 0 ] && \
            [ "$h" -lt "$end" ]) || return 1
    fi
    m=${update_time% *}
    [ -z "$m" ] && return 1
    ([ "$m" -ge 0 ] && [ "$m" -le 19 ]) || ([ "$m" -ge 30 ] && \
        [ "$m" -le 49 ]) || return 1
    return 0
}

# param:
# $1 - valid time window string
#      e.g <1-3>, <23-4>, <2-2>
# return:
#   "<min> <hour>" - random hour and minute in the time window
generate_update_time () {
    local time_window start end h m d
    time_window="$1"
    start=${time_window%-*}
    end=${time_window#*-}

    [ "${start::1}" = 0 ] && [ "${#start}" -eq 2 ] && start=${start:1:1}
    [ "${end::1}" = 0 ] && [ "${#end}" -eq 2 ] && end=${end:1:1}

    # handle cases like <1-1>, <22-22> - 24 hour window
    if [ "$start" -eq "$end" ]; then
        h=$(shuf -i 0-23 -n 1 2>/dev/null)
    # handle cases like <22-2>, <3-1>
    elif [ "$start" -gt "$end" ]; then
        d=$((24 - start))
        h=$(shuf -i 0-$((end + d - 1)) -n 1 2>/dev/null)
        if [ "$h" -ge "$d" ]; then
            h=$((h - d))
        else
            h=$((h - d + 24))
        fi
    else
        h=$(shuf -i "$start-$((end - 1))" -n 1 2>/dev/null)
    fi
    m=$(shuf -e {0..19} {30..49} -n 1 2>/dev/null)
    echo "$m $h"
}

get_update_time () {
    local update_time
    if [ -f "$al_cron_job_file" ]; then
        update_time=$(grep "^[0-9]" "$al_cron_job_file" 2>/dev/null | \
            awk '{print $1, $2}')
        [ -n "$update_time" ] && echo "$update_time"
    fi
}

get_readable_update_time () {
    local update_time h m
    update_time="$1"
    if [ -n "$update_time" ]; then
        h=${update_time#* }
        [ ${#h} -eq 1 ] && h="0$h"
        m=${update_time% *}
        [ ${#m} -eq 1 ] && m="0$m"
        echo "$h:$m"
    fi
}

configure_auto_update_time_window () {
    local time_window
    time_window="$1"

    # add/change time window in config file
    if grep -q "^auto_update_time_window=" "$config_file" 2>/dev/null; then
        sed -i "s/auto_update_time_window=.*/auto_update_time_window=\
$time_window/g" "$config_file"
    else
        cat >> "$config_file" <<EOF

# Auto update time window
auto_update_time_window=$time_window
EOF
    fi
    log "Configured daily auto update time window(24-hour): $time_window"

}

configure_auto_update_time () {
    local update_time readable_update_time
    update_time="$1"
    # add/update cron job
    [ -f "$al_cron_job_file" ] && chmod 644 "$al_cron_job_file"
    cat > "$al_cron_job_file" <<CRON
# Daily cron job for AL auto updates.
# Created by al-config, do not modify this file.
# If you want to change update time, use
# 'sudo al-config -w <time window>' to set auto update time window
$update_time * * * root /usr/sbin/al-update >/dev/null
CRON
    chmod 444 "$al_cron_job_file"
    readable_update_time=$(get_readable_update_time "$update_time")
    log "Configured daily auto update time(24-hour): $readable_update_time"
    log "Created cron job file $al_cron_job_file ."
}

generate_default_auto_update_time_window () {
    local current_hour start_hour end_hour
    current_hour=$(date +%k)
    # set the start window at least 1-2 hours later
    # and set default time window to 4 hours
    start_hour=$((current_hour + 2))
    end_hour=$((start_hour + 4))
    [ "$start_hour" -ge 24 ] && start_hour=$((start_hour - 24))
    [ "$end_hour" -ge 24 ] && end_hour=$((end_hour - 24))
    echo "$start_hour-$end_hour"
}

schedule_auto_update () {
    local force current_update_time time_window update_time h m end
    force="$1"
    time_window=$auto_update_time_window
    validate_auto_update_time_window "$time_window" ||
        time_window=$(generate_default_auto_update_time_window)
    if [ "$force" = 1 ]; then
        update_time=$(generate_update_time "$time_window")
    else
        current_update_time=$(get_update_time)
        update_time=$current_update_time

        # handle the case that old instances which have update time but don't
        # have time window
        if [ -n "$current_update_time" ]; then
            m=${current_update_time% *}
            h=${current_update_time#* }
            # fix the incorret update time that is not in 0-19, 30-49
            if ! ( ([ "$m" -ge 0 ] && [ "$m" -le 19 ]) || ([ "$m" -ge 30 ] \
                && [ "$m" -le 49 ]) ); then
                log_debug "Fixing daily auto update time: \
$(get_readable_update_time "$current_update_time")"
                m=$(shuf -e {0..19} {30..49} -n 1 2>/dev/null)
                update_time="$m $h"
            fi
            # create update window
            if [ -z "$auto_update_time_window" ]; then
                end=$((h + 4))
                [ $end -ge 24 ] && end=$((end - 24))
                time_window="$h-$end"
                validate_auto_update_time_window "$time_window" ||
                    time_window=$(generate_default_auto_update_time_window)
            fi
        fi
        if ! validate_auto_update_time "$time_window" "$update_time"; then
            update_time=$(generate_update_time "$time_window")
        fi
    fi

    [ "$time_window" != "$auto_update_time_window" ] &&
        configure_auto_update_time_window "$time_window"
    [ "$update_time" != "$current_update_time" ] &&
        configure_auto_update_time "$update_time"
}
