#!/bin/bash
#
# Copyright Â© 2019 Oracle Corp., Inc.  All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl
#
# al-config: configure OCI notification topic OCID or OCI CLI profile
#

. /usr/lib/al-config/functions

show_current_auto_update_time() {
    source_config_file
    local update_time readable_update_time
    if [ -z "$auto_update_time_window" ]; then
        echo "Daily auto update time window is not set."
    else
        echo "Current daily auto update time window(24-hour): $auto_update_time_window"
    fi
    update_time=$(get_update_time)
    if [ -z "$update_time" ]; then
        echo "Daily auto update time is not set."
    else
        readable_update_time=$(get_readable_update_time "$update_time")
        echo "Current daily auto update time(24-hour): $readable_update_time"
    fi
}

CONFIGURE_NOTIFICATION_TOPIC_USAGE="Configure OCI notification service topic OCID:
  Usage:
    ${0##*/} -T [topic OCID]
  Options:
    -T [topic OCID] OCI notification service topic OCID"

CONFIGURE_OCI_CLI_USAGE="Configure OCI CLI profile:
  Usage:
    ${0##*/} -u [user OCID] -t [tenancy OCID] -k [key file]
  Options:
    -u [user OCID] OCI User OCID
    -t [tenancy OCID] OCI Tenancy OCID
    -k [key file] from which we obtain the API private key
    -p [key passphrase file] from which we obtain API key passphrase. Provide
       this if API private key is encrypted. If not provided, user will be
       prompted to enter passphrase."

CONFIGURE_TIME_WINDOW_USAGE="Configure or show daily auto update time window:
  Usage:
    ${0##*/} -w [time window]
    ${0##*/} -s
  Options:
    -w [window] Time window string, format: <start_hour>-<end_hour>
       <start_hour> and <end_hour> must be integers between 0 and 23.
        Minimum window is 2 hours, maximum window is 6 hours.
    -s Show current auto update time window and update time.
  Time window examples:
    Valid time window:
       0-2:  2-hour window(12am - 2am)
      20-0:  4-hour window(8pm - 12am)
      23-5:  6-hour window(11pm - 5am)
   Invalid time window:
       1-2:  minimum window should be 2 hours.
      20-3:  maximum window should be 6 hours."

usage() {
    if [ -n "$1" ]; then
        case "$1" in
            topic)
                echo "$CONFIGURE_NOTIFICATION_USAGE" >&2
                ;;
            cli)
                echo "$CONFIGURE_OCI_CLI_USAGE" >&2
                ;;
            window)
                echo "$CONFIGURE_TIME_WINDOW_USAGE" >&2
                ;;
            *)
                ;;
        esac
    else
        cat >&2 <<EOF
$CONFIGURE_NOTIFICATION_TOPIC_USAGE

$CONFIGURE_OCI_CLI_USAGE

$CONFIGURE_TIME_WINDOW_USAGE
EOF
    fi
    exit 1
}

run_as_root_check

while getopts "u:k:p:t:T:w:sh" OPTION; do
    case "$OPTION" in
      u)
        oci_user=$OPTARG
        ;;
      k)
        oci_api_private_key_from=$OPTARG
        ;;
      p)
        oci_key_passphrase_from=$OPTARG
        ;;
      t)
        oci_tenancy=$OPTARG
        ;;
      T)
        oci_topic=$OPTARG
        ;;
      w)
        time_window=$OPTARG
        ;;
      s)
        show_current_auto_update_time
        exit 0
        ;;
      h)
        usage
        ;;
      *)
        usage
        ;;
    esac
done

# nothing provided
if [ -z "$oci_topic" -a -z "$oci_user" -a -z "$oci_api_private_key_from" -a \
    -z "$oci_tenancy" -a -z "$time_window" ]; then
    usage
fi

# user, api praviate key, tenancy have to be provided together
if [ -n "$oci_user" -o -n "$oci_api_private_key_from" -o -n \
    "$oci_tenancy" ]; then
    if [ -z "$oci_user" -o -z "$oci_api_private_key_from" -o -z \
        "$oci_tenancy" ] ; then
        usage cli
    fi
fi

old_umask=$(umask)

### configuration ###

## OCI CLI profile - oci_cli.conf ##
if [ -n "$oci_user" -a -n "$oci_api_private_key_from" -a \
    -n "$oci_tenancy" ]; then

    # validate OCID
    if [[ ! $oci_user =~ ^ocid[0-9]\.user\. ]]; then
        echo "Invalid user OCID $oci_user" >&2
        exit 2
    fi
    if [[ ! $oci_tenancy =~ ^ocid[0-9]\.tenancy\. ]]; then
        echo "Invalid tenancy OCID $oci_tenancy" >&2
        exit 2
    fi
    # validate private key
    if [ ! -r "$oci_api_private_key_from" ]; then
        echo "Could not read file $oci_api_private_key_from" >&2
        exit 2
    fi

    oci_api_private_key=$(read_file "$oci_api_private_key_from")
    if [ -z "$oci_api_private_key" ]; then
        echo "Invalid private key in $oci_api_private_key_from" >&2
        exit 2
    fi

    require_passphrase=0
    # check if the private key is encrytped
    # line 2: ^Proc-Type: 4,ENCRYPTED$
    if sed -n '2 p' "$oci_api_private_key_from" | \
        grep -q "^Proc-Type:.*ENCRYPTED$"; then
        require_passphrase=1
    fi

    # validate passphrase
    oci_key_passphrase=""
    if [ $require_passphrase -eq 1 ]; then
        if [ -z "$oci_key_passphrase_from" ]; then
            #echo "API key passphrase is required." >&2
            #prompt user to enter passphrase
            read -r -s -p "Enter passphrase for $oci_api_private_key_from: " \
                oci_key_passphrase
            echo
            if [ -z "$oci_key_passphrase" ]; then
                echo "Invalid passphrase for $oci_api_private_key_from" >&2
                exit 3
            fi
            # create temp passphrase file with permission 600
            passphrase_file=$(mktemp "$work_dir/.passphrase_XXX")
            cat > "$passphrase_file" <<EOF
$oci_key_passphrase
EOF

        else
            # key passphrase file provided
            if [ ! -r "$oci_key_passphrase_from" ]; then
                echo "Could not read file $oci_key_passphrase_from" >&2
                exit 2
            fi
            oci_key_passphrase=$(read_file "$oci_key_passphrase_from")
            passphrase_file="$oci_key_passphrase_from"
        fi
        # validate passphrase
        if ! openssl rsa -passin file:"$passphrase_file" -pubout -outform DER \
            -in "$oci_api_private_key_from" &>/dev/null; then
            # clean up temp passphrase file
            if [ "$passphrase_file" != "$oci_key_passphrase_from" ]; then
                rm -f "$passphrase_file"
            fi
            echo "Incorrect passphrase for $oci_api_private_key_from" >&2
            exit 3
        fi
    fi

    # calculate the public key fingerprint
    if [ $require_passphrase -eq 1 ]; then
        oci_key_fingerprint=$(openssl rsa -passin file:"$passphrase_file" \
            -pubout -outform DER -in "$oci_api_private_key_from" 2>/dev/null | \
            openssl md5 -c | awk '{print $2}')
        # clean up passphrase file
        if [ "$passphrase_file" != "$oci_key_passphrase_from" ]; then
            rm -f "$passphrase_file"
        fi
    else
        oci_key_fingerprint=$(openssl rsa -pubout -outform DER \
            -in "$oci_api_private_key_from" 2>/dev/null | openssl md5 -c | \
            awk '{print $2}')
    fi

    region=$(curl -sfm 25 \
        http://169.254.169.254/opc/v1/instance/canonicalRegionName 2>/dev/null)
    if [ -z "$region" ]; then
        echo "Could not obtain OCI region." >&2
        exit 3
    fi

    umask 0066
    # oci_api_key.pem
    cat > "$oci_api_key_file" <<KEYFILE
$oci_api_private_key
KEYFILE

    # oci_cli.conf
    cat > "$oci_cli_config_file" <<CONFIG
[DEFAULT]
user = $oci_user
key_file = $oci_api_key_file
fingerprint = $oci_key_fingerprint
pass_phrase = $oci_key_passphrase
tenancy = $oci_tenancy
region = $region
CONFIG

    umask "$old_umask"
    log "Configured OCI CLI profile."
    echo "Please delete $oci_api_private_key_from"
    if [ -f "$oci_key_passphrase_from" ]; then
        echo "and $oci_key_passphrase_from"
    fi
fi

## oci.conf ##
# topic is provided
# set topic OCID to oci.conf
if [ -n "$oci_topic" ]; then
    if [[ ! $oci_topic =~ ^ocid[0-9]\.onstopic\. ]]; then
        echo "Invalid notification service topic OCID $oci_topic" >&2
        exit 2
    fi
    umask 0066
    if [ ! -f "$oci_config_file" ]; then
        cat > "$oci_config_file" <<EOF
# This file is a bourne shell snippet, and is sourced by the
# script al-notify for configuration.

EOF
    fi
    if grep -q "^topic=" "$oci_config_file"; then
        sed -i "s/^topic=.*/topic=\"$oci_topic\"/g" "$oci_config_file"
    else
        cat >> "$oci_config_file" <<EOF
# OCI notification service topic OCID
topic="$oci_topic"
EOF
    fi
    umask "$old_umask"
    log "Configured OCI notification service topic OCID."
    # send a message immediately
    instance_name=$(get_instance_name)
    title="AL: Notification enabled on instance $instance_name"
    out_file=$(mktemp "$work_dir/config_XXXX")
    cat > "$out_file" <<EOF
Configured OCI notification service topic OCID on instance $instance_name:
  $oci_topic
EOF
    al-notify -t "$title" -f "$out_file"
    rm -f "$out_file"
fi

## Set auto update time window##
if [ -n "$time_window" ]; then
    validate_auto_update_time_window "$time_window"
    ret=$?
    if [ "$ret" -ne 0 ]; then
        echo "Invalid time window." >&2
        [ "$ret" -eq 3 ] && echo "Minimum time window is 2 hours." >&2
        [ "$ret" -eq 4 ] && echo "Maximum time window is 6 hours." >&2
        echo
        usage window
        exit $ret
    fi
    configure_auto_update_time_window "$time_window"
    update_time=$(generate_update_time "$time_window")
    configure_auto_update_time "$update_time"
fi
